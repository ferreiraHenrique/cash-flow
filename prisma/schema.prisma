// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// model User {
//   id      String   @id @default(auto()) @map("_id") @db.ObjectId
//   email   String   @unique
//   name    String?
// }

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refreshToken") @db.String
  access_token      String? @map("accessToken") @db.String
  expires_at        Int?    @map("expiresAt")
  token_type        String? @map("tokenType")
  scope             String?
  id_token          String? @map("idToken") @db.String
  session_state     String? @map("sessionState")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Year {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String   @unique
  months  Month[]
  startAt DateTime
  userId  String   @db.ObjectId

  @@unique([name, userId])
  @@map("years")
}

model Month {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  userId  String   @db.ObjectId
  startAt DateTime
  yearId  String   @db.ObjectId

  year         Year               @relation(fields: [yearId], references: [id], onDelete: Cascade)
  transactions MonthTransaction[]

  @@unique([yearId, name])
  @@map("months")
}

model MonthTransaction {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  amount   Float
  discount Float   @default(0.0)
  isCredit Boolean
  monthId  String  @db.ObjectId

  month Month @relation(fields: [monthId], references: [id], onDelete: Cascade)

  @@map("monthTransactions")
}

model Receipt {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  baseAmount Float
  userId     String    @db.ObjectId
  startAt    DateTime
  endAt      DateTime?
  isActive   Boolean   @default(true)

  @@map("receipts")
}

model Expense {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  baseAmount Float
  userId     String    @db.ObjectId
  startAt    DateTime
  endAt      DateTime?
  isActive   Boolean   @default(true)

  @@map("expenses")
}

model CreditCard {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  lastNumbers String
  userId      String @db.ObjectId

  purchases CreditCardPurchase[]

  @@map("creditCards")
}

model CreditCardPurchaseInstallment {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  date                 DateTime
  amount               Float
  installmentNumber    Int
  creditCardPurchaseId String   @db.ObjectId

  creditCardPurchase CreditCardPurchase @relation(fields: [creditCardPurchaseId], references: [id], onDelete: Cascade)

  @@map("creditCardPurchaseInstallments")
}

model CreditCardPurchase {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  name                 String
  numberOfInstallments Int
  amount               Float
  date                 DateTime
  creditCardId         String   @db.ObjectId
  firstDueDate         DateTime

  creditCard   CreditCard                      @relation(fields: [creditCardId], references: [id], onDelete: Cascade)
  installments CreditCardPurchaseInstallment[]

  @@map("creditCardPurchases")
}

model Financing {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  name                 String
  numberOfInstallments Int
  amount               Float
  firstDueDate         DateTime
  userId               String   @db.ObjectId

  installments FinancingInstallment[]

  @@map("financings")
}

model FinancingInstallment {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  date              DateTime
  amount            Float
  installmentNumber Int
  financingId       String   @db.ObjectId

  financing Financing @relation(fields: [financingId], references: [id])

  @@map("financingInstallments")
}
